/*
* AllBinary Open License Version 1
* Copyright (c) 2011 AllBinary
* 
* By agreeing to this license you and any business entity you represent are
* legally bound to the AllBinary Open License Version 1 legal agreement.
* 
* You may obtain the AllBinary Open License Version 1 legal agreement from
* AllBinary or the root directory of AllBinary's AllBinary Platform repository.
* 
* Created By: Travis Berthelot
* 
*/
package allbinary.input.automation.module.generic.configuration.profile.actions.script.condition.processors.output;

import allbinary.input.media.image.InputImageType;

import java.util.Iterator;
import java.util.Vector;

import javax.swing.DefaultListModel;

import abcs.logic.communication.log.Log;
import abcs.logic.communication.log.LogUtil;

/**
 *
 * @author  USER
 */
public class ImageActionScriptOutputJPanel
    extends javax.swing.JPanel
{
    private ImageActionScriptOutputInterface capturedImageActionScriptOutputInterface;
    
    /** Creates new form ColorAtActionJPanel */
    public ImageActionScriptOutputJPanel(
        ImageActionScriptOutputInterface capturedImageActionScriptOutputInterface)
        throws Exception
    {
        LogUtil.put(new Log("Start", this, "Constructor"));
        
        initComponents();
        
        this.capturedImageActionScriptOutputInterface = capturedImageActionScriptOutputInterface;

        this.set();
    }
    
    private void set()
    {
        this.setImageTypeJlistModel();
        
        ImageTypes imageTypes =
            this.capturedImageActionScriptOutputInterface.getImageTypes();
        Vector vector = imageTypes.getVector();

        int selectedArray[] = new int[vector.size()];
        int index = 0;
        Iterator iterator = vector.iterator();
        while(iterator.hasNext())
        {
            InputImageType imageType = (InputImageType) iterator.next();
            selectedArray[index++] = imageType.getIndex();
        }

        this.itemTypesJList.setSelectedIndices(selectedArray);
        
        if(this.capturedImageActionScriptOutputInterface.isSaved())
        {
            this.saveJCheckBox.setSelected(true);
        }

        if(this.capturedImageActionScriptOutputInterface.isSaved())
        {
            this.displayJCheckBox.setSelected(true);
        }

        this.capturedImageActionScriptOutputInterface.log();
    }
    
    private void update()
    {

        Object object[] = this.itemTypesJList.getSelectedValues();

        ImageTypes imageTypes = ImageTypes.valueOf(object);

        this.capturedImageActionScriptOutputInterface.setImageTypes(imageTypes);
        
        if(this.saveJCheckBox.isSelected())
        {
            this.capturedImageActionScriptOutputInterface.setSaved(true);
        }
        else
        {
            this.capturedImageActionScriptOutputInterface.setSaved(false);
        }

        if(this.displayJCheckBox.isSelected())
        {
            this.capturedImageActionScriptOutputInterface.setDisplay(true);
        }
        else
        {
            this.capturedImageActionScriptOutputInterface.setDisplay(false);
        }
        
        this.capturedImageActionScriptOutputInterface.log();
    }

    private void setImageTypeJlistModel()
    {
        DefaultListModel defaultListModel = new DefaultListModel();
        Vector vector = InputImageType.getAllAsVector();
        
        Iterator iterator = vector.iterator();
        while(iterator.hasNext())
        {
            InputImageType imageType = (InputImageType) iterator.next();
            defaultListModel.addElement(imageType.getName());
        }

        this.itemTypesJList.setModel(defaultListModel);
    }

    public javax.swing.JDialog getCapturedImageActionJDialog()
    {
        return capturedImageActionJDialog;
    }

    public void setCapturedImageActionJDialog(javax.swing.JDialog capturedImageActionJDialog)
    {
        this.capturedImageActionJDialog = capturedImageActionJDialog;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        capturedImageActionJDialog = new javax.swing.JDialog();
        titleJLabel = new javax.swing.JLabel();
        okJButton = new javax.swing.JButton();
        saveJCheckBox = new javax.swing.JCheckBox();
        displayJCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTypesJList = new javax.swing.JList();
        capturedImageActionJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        capturedImageActionJDialog.setMinimumSize(new java.awt.Dimension(250, 250));
        titleJLabel.setText("Image Output Options");

        okJButton.setText("OK");
        okJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okJButtonActionPerformed(evt);
            }
        });

        saveJCheckBox.setText("Save To File");
        saveJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        saveJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        displayJCheckBox.setText("Display");
        displayJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        displayJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        displayJCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                displayJCheckBoxActionPerformed(evt);
            }
        });

        itemTypesJList.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(itemTypesJList);

        javax.swing.GroupLayout capturedImageActionJDialogLayout = new javax.swing.GroupLayout(capturedImageActionJDialog.getContentPane());
        capturedImageActionJDialog.getContentPane().setLayout(capturedImageActionJDialogLayout);
        capturedImageActionJDialogLayout.setHorizontalGroup(
            capturedImageActionJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(capturedImageActionJDialogLayout.createSequentialGroup()
                .addGroup(capturedImageActionJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(capturedImageActionJDialogLayout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(titleJLabel))
                    .addGroup(capturedImageActionJDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(capturedImageActionJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(capturedImageActionJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(displayJCheckBox)
                                .addComponent(saveJCheckBox, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addGroup(capturedImageActionJDialogLayout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(okJButton))))
                    .addGroup(capturedImageActionJDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)))
                .addContainerGap())
        );
        capturedImageActionJDialogLayout.setVerticalGroup(
            capturedImageActionJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(capturedImageActionJDialogLayout.createSequentialGroup()
                .addComponent(titleJLabel)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveJCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayJCheckBox)
                .addGap(9, 9, 9)
                .addComponent(okJButton)
                .addContainerGap())
        );

        setMinimumSize(new java.awt.Dimension(100, 0));
        capturedImageActionJButton.setText("Edit");
        capturedImageActionJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                capturedImageActionJButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Capture Image:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(capturedImageActionJButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(capturedImageActionJButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void displayJCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_displayJCheckBoxActionPerformed
    {//GEN-HEADEREND:event_displayJCheckBoxActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_displayJCheckBoxActionPerformed
    
    private void okJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okJButtonActionPerformed
    {//GEN-HEADEREND:event_okJButtonActionPerformed
// TODO add your handling code here:
        this.update();
        this.getCapturedImageActionJDialog().setVisible(false);
    }//GEN-LAST:event_okJButtonActionPerformed
    
    private void capturedImageActionJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_capturedImageActionJButtonActionPerformed
    {//GEN-HEADEREND:event_capturedImageActionJButtonActionPerformed
// TODO add your handling code here:
        this.getCapturedImageActionJDialog().setVisible(true);
    }//GEN-LAST:event_capturedImageActionJButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton capturedImageActionJButton;
    private javax.swing.JDialog capturedImageActionJDialog;
    private javax.swing.JCheckBox displayJCheckBox;
    private javax.swing.JList itemTypesJList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okJButton;
    private javax.swing.JCheckBox saveJCheckBox;
    private javax.swing.JLabel titleJLabel;
    // End of variables declaration//GEN-END:variables
    
}
