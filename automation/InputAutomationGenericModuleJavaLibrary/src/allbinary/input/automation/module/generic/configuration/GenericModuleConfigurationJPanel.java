/*
* AllBinary Open License Version 1
* Copyright (c) 2011 AllBinary
* 
* By agreeing to this license you and any business entity you represent are
* legally bound to the AllBinary Open License Version 1 legal agreement.
* 
* You may obtain the AllBinary Open License Version 1 legal agreement from
* AllBinary or the root directory of AllBinary's AllBinary Platform repository.
* 
* Created By: Travis Berthelot
* 
*/
package allbinary.input.automation.module.generic.configuration;

import java.util.Iterator;
import java.util.Vector;

import abcs.logic.communication.log.Log;
import abcs.logic.communication.log.LogUtil;
import allbinary.input.automation.module.generic.configuration.profile.GenericProfile;
import allbinary.input.automation.module.generic.configuration.profile.GenericProfileDataWorkerType;
import allbinary.input.automation.module.generic.configuration.profile.GenericProfiles;
import allbinary.input.automation.module.generic.configuration.profile.actions.GenericProfileActions;
import allbinary.input.automation.module.generic.configuration.profile.actions.GenericProfileActionsJPanel;

/**
 *
 * @author  USER
 */
public class GenericModuleConfigurationJPanel
    extends javax.swing.JPanel
    implements GenericModuleConfigurationInterface
{
    private GenericProfiles genericProfiles;
    
    private GenericProfile selectedGenericProfile;
    
    public GenericModuleConfigurationJPanel() throws Exception
    {
        initComponents();
        
        this.setGenericProfiles(
            new GenericProfiles(GenericProfiles.DEFAULT_FILE));
        this.selectFirstElement();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        newProfileJDialog = new javax.swing.JDialog();
        okNewProfileJButton = new javax.swing.JButton();
        newProfileNameJLabel = new javax.swing.JLabel();
        newProfileNameJTextField = new javax.swing.JTextField();
        buttonGroup2 = new javax.swing.ButtonGroup();
        genericJTabbedPane = new javax.swing.JTabbedPane();
        genericProfilesJPanel = new javax.swing.JPanel();
        genericProfilesJScrollPane = new javax.swing.JScrollPane();
        genericProfilesJList = new javax.swing.JList();
        newProfileJButton = new javax.swing.JButton();
        deleteProfileJButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        screenCaptureJRadioButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        savedCaptureJRadioButton = new javax.swing.JRadioButton();
        captureMotionAnalysisJCheckBox = new javax.swing.JCheckBox();
        captureComparisonJCheckBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        blankGenericProfileActionsJPanel = new javax.swing.JPanel();

        newProfileJDialog.setMinimumSize(new java.awt.Dimension(250, 150));
        newProfileJDialog.setResizable(false);
        okNewProfileJButton.setText("Ok");
        okNewProfileJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okNewProfileJButtonActionPerformed(evt);
            }
        });

        newProfileNameJLabel.setText("New Profile Name");

        javax.swing.GroupLayout newProfileJDialogLayout = new javax.swing.GroupLayout(newProfileJDialog.getContentPane());
        newProfileJDialog.getContentPane().setLayout(newProfileJDialogLayout);
        newProfileJDialogLayout.setHorizontalGroup(
            newProfileJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newProfileJDialogLayout.createSequentialGroup()
                .addGroup(newProfileJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newProfileJDialogLayout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(newProfileNameJLabel))
                    .addGroup(newProfileJDialogLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(newProfileNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(newProfileJDialogLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(okNewProfileJButton)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        newProfileJDialogLayout.setVerticalGroup(
            newProfileJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newProfileJDialogLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(newProfileNameJLabel)
                .addGap(16, 16, 16)
                .addComponent(newProfileNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(okNewProfileJButton))
        );

        setLayout(new java.awt.GridLayout(1, 0));

        setMinimumSize(new java.awt.Dimension(400, 300));
        setPreferredSize(new java.awt.Dimension(700, 700));
        genericJTabbedPane.setToolTipText("");
        genericJTabbedPane.setMinimumSize(new java.awt.Dimension(800, 600));
        genericProfilesJPanel.setMinimumSize(new java.awt.Dimension(400, 300));
        genericProfilesJPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        genericProfilesJList.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                genericProfilesJListValueChanged(evt);
            }
        });

        genericProfilesJScrollPane.setViewportView(genericProfilesJList);

        newProfileJButton.setText("New");
        newProfileJButton.setToolTipText("Creates a new profile");
        newProfileJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newProfileJButtonActionPerformed(evt);
            }
        });

        deleteProfileJButton.setText("Delete");
        deleteProfileJButton.setToolTipText("Deletes the selected profile");
        deleteProfileJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteProfileJButtonActionPerformed(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 100));
        screenCaptureJRadioButton.setText("Screen Captures");
        screenCaptureJRadioButton.setToolTipText("Records the screen into memory for logical processing");
        screenCaptureJRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        screenCaptureJRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        screenCaptureJRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                screenCaptureJRadioButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Profile Options");

        jLabel2.setText("Process From:");

        savedCaptureJRadioButton.setText("Saved Images");
        savedCaptureJRadioButton.setToolTipText("Loads images from files for logical processing.  Usually for debugging your profile actions");
        savedCaptureJRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        savedCaptureJRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        savedCaptureJRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                savedCaptureJRadioButtonActionPerformed(evt);
            }
        });

        captureMotionAnalysisJCheckBox.setText("Motion Analysis");
        captureMotionAnalysisJCheckBox.setToolTipText("Uses image comparison and contraints to locate moving objects");
        captureMotionAnalysisJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        captureMotionAnalysisJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        captureMotionAnalysisJCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                captureMotionAnalysisJCheckBoxActionPerformed(evt);
            }
        });

        captureComparisonJCheckBox.setText("Comparison");
        captureComparisonJCheckBox.setToolTipText("Compares the last two input images for multi image logic");
        captureComparisonJCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        captureComparisonJCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        captureComparisonJCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                captureComparisonJCheckBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Image Processing:");
        jLabel3.setToolTipText("Turns on/off various extended image processing");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(screenCaptureJRadioButton)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(savedCaptureJRadioButton)
                    .addComponent(captureMotionAnalysisJCheckBox)
                    .addComponent(captureComparisonJCheckBox)
                    .addComponent(jLabel3))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(7, 7, 7)
                .addComponent(screenCaptureJRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(savedCaptureJRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(7, 7, 7)
                .addComponent(captureComparisonJCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(captureMotionAnalysisJCheckBox)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout genericProfilesJPanelLayout = new javax.swing.GroupLayout(genericProfilesJPanel);
        genericProfilesJPanel.setLayout(genericProfilesJPanelLayout);
        genericProfilesJPanelLayout.setHorizontalGroup(
            genericProfilesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genericProfilesJPanelLayout.createSequentialGroup()
                .addGroup(genericProfilesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(genericProfilesJPanelLayout.createSequentialGroup()
                        .addComponent(newProfileJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteProfileJButton))
                    .addGroup(genericProfilesJPanelLayout.createSequentialGroup()
                        .addComponent(genericProfilesJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)))
                .addContainerGap())
        );
        genericProfilesJPanelLayout.setVerticalGroup(
            genericProfilesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genericProfilesJPanelLayout.createSequentialGroup()
                .addGroup(genericProfilesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newProfileJButton)
                    .addComponent(deleteProfileJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(genericProfilesJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                    .addComponent(genericProfilesJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)))
        );
        genericJTabbedPane.addTab("Profiles", genericProfilesJPanel);

        javax.swing.GroupLayout blankGenericProfileActionsJPanelLayout = new javax.swing.GroupLayout(blankGenericProfileActionsJPanel);
        blankGenericProfileActionsJPanel.setLayout(blankGenericProfileActionsJPanelLayout);
        blankGenericProfileActionsJPanelLayout.setHorizontalGroup(
            blankGenericProfileActionsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );
        blankGenericProfileActionsJPanelLayout.setVerticalGroup(
            blankGenericProfileActionsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 275, Short.MAX_VALUE)
        );
        genericJTabbedPane.addTab("Actions", blankGenericProfileActionsJPanel);

        add(genericJTabbedPane);

    }// </editor-fold>//GEN-END:initComponents

    private void savedCaptureJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_savedCaptureJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_savedCaptureJRadioButtonActionPerformed
        try
        {
            if(this.savedCaptureJRadioButton.isSelected())
            {
                LogUtil.put(new Log("Selected", this, "savedCaptureJRadioButtonActionPerformed"));
                
                this.getSelectedGenericProfile().add(
                    GenericProfileDataWorkerType.SAVED_CAPTURE);
                this.getSelectedGenericProfile().remove(
                    GenericProfileDataWorkerType.SCREEN_CAPTURE);
                this.screenCaptureJRadioButton.setSelected(false);
                this.getGenericProfiles().save();
            }
        }
        catch(Exception e)
        {
            LogUtil.put(new Log("Exception", this, "savedCaptureJRadioButtonActionPerformed", e));
        }
    }//GEN-LAST:event_savedCaptureJRadioButtonActionPerformed

    private void screenCaptureJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_screenCaptureJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_screenCaptureJRadioButtonActionPerformed
        try
        {
            if(this.screenCaptureJRadioButton.isSelected())
            {
                LogUtil.put(new Log("Selected", this, "screenCaptureJRadioButtonActionPerformed"));
                
                this.getSelectedGenericProfile().add(
                    GenericProfileDataWorkerType.SCREEN_CAPTURE);
                this.getSelectedGenericProfile().remove(
                    GenericProfileDataWorkerType.SAVED_CAPTURE);
                this.savedCaptureJRadioButton.setSelected(false);
                this.getGenericProfiles().save();
            }
        }
        catch(Exception e)
        {
            LogUtil.put(new Log("Exception", this, "screenCaptureJRadioButtonActionPerformed", e));
        }
    }//GEN-LAST:event_screenCaptureJRadioButtonActionPerformed
    
    private void captureMotionAnalysisJCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_captureMotionAnalysisJCheckBoxActionPerformed
    {//GEN-HEADEREND:event_captureMotionAnalysisJCheckBoxActionPerformed
        try
        {
            if(this.captureMotionAnalysisJCheckBox.isSelected())
            {
                this.getSelectedGenericProfile().add(
                    GenericProfileDataWorkerType.MOTION);
            }
            else
            {
                this.getSelectedGenericProfile().remove(
                    GenericProfileDataWorkerType.MOTION);
            }
            this.getGenericProfiles().save();
        }
        catch(Exception e)
        {
            LogUtil.put(new Log("Exception", this, "captureComparisonJCheckBoxActionPerformed", e));
        }
    }//GEN-LAST:event_captureMotionAnalysisJCheckBoxActionPerformed
    
    private void captureComparisonJCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_captureComparisonJCheckBoxActionPerformed
    {//GEN-HEADEREND:event_captureComparisonJCheckBoxActionPerformed
// TODO add your handling code here:
        try
        {
            if(this.captureComparisonJCheckBox.isSelected())
            {
                this.getSelectedGenericProfile().add(
                    GenericProfileDataWorkerType.COMPARISON);
            }
            else
            {
                this.getSelectedGenericProfile().remove(
                    GenericProfileDataWorkerType.COMPARISON);
            }
            this.getGenericProfiles().save();
        }
        catch(Exception e)
        {
            LogUtil.put(new Log("Exception", this, "captureComparisonJCheckBoxActionPerformed", e));
        }
    }//GEN-LAST:event_captureComparisonJCheckBoxActionPerformed
    
    private void updateProfileUI(String profileNameString)
    throws Exception
    {
        this.getBlankGenericProfileActionsJPanel().removeAll();
        
        if(profileNameString != null)
        {
            GenericProfileActionsJPanel genericProfileActionsJPanel =
                new GenericProfileActionsJPanel();
            
            //Load actions for a given profile
            this.setSelectedGenericProfile(
                this.getGenericProfiles().get(
                profileNameString));
            
            this.getSelectedGenericProfile().setGenericProfileActions(
                new GenericProfileActions(
                    genericProfileActionsJPanel,
                    profileNameString));
            
            //TWB - add listener to force enable various image processing workers
            //this.getSelectedGenericProfile().getGenericProfileActions().addListener(this);
            
            genericProfileActionsJPanel.setGenericProfileActions(
                this.getSelectedGenericProfile().getGenericProfileActions());
            
            genericProfileActionsJPanel.selectFirstElement();
            
            javax.swing.GroupLayout layout =
                (javax.swing.GroupLayout)
                this.getBlankGenericProfileActionsJPanel().getLayout();
            
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 395, Short.MAX_VALUE)
                .addComponent(
                genericProfileActionsJPanel,
                javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 256, Short.MAX_VALUE)
                .addComponent(
                genericProfileActionsJPanel,
                javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                );
            
            //Set selected profile options
            this.updateProfileOptions();
            
            LogUtil.put(new Log("Setting Configuration Profile JPanel", this,
                "updateProfileUI"));
        }
        else
        {
            LogUtil.put(new Log("Null Configuration Profile", this, "updateProfileUI"));
        }
    }
    
    private void selectFirstElement() throws Exception
    {
        this.genericProfilesJList.setModel(
            this.getGenericProfiles().getDefaultListModelHelper().getListModel());
        
        if(this.genericProfilesJList.getModel().getSize() > 0)
        {
            this.genericProfilesJList.setSelectedValue(
                this.genericProfilesJList.getModel().getElementAt(0), true);
            
            this.updateProfileUI(
                (String) this.genericProfilesJList.getModel().getElementAt(0));
        }
    }
    
    private void updateProfileOptions()
    throws Exception
    {
        LogUtil.put(new Log("Start", this, "updateProfileOptions"));
        
        GenericProfile genericProfile = this.getSelectedGenericProfile();
        Vector vector = genericProfile.getGenericProfileDataWorkerTypeVector();
        
        this.screenCaptureJRadioButton.setSelected(false);
        this.savedCaptureJRadioButton.setSelected(false);
        this.captureComparisonJCheckBox.setSelected(false);
        this.captureMotionAnalysisJCheckBox.setSelected(false);
        
        Iterator iterator = vector.iterator();
        while(iterator.hasNext())
        {
            GenericProfileDataWorkerType genericProfileDataWorkerType =
                (GenericProfileDataWorkerType) iterator.next();
            
            LogUtil.put(new Log(genericProfile.getName() + " has GenericProfileDataWorkerType: " + genericProfileDataWorkerType.toString(), 
                this, "updateProfileOptions"));
            
            if(genericProfileDataWorkerType == GenericProfileDataWorkerType.SCREEN_CAPTURE)
            {
                LogUtil.put(new Log("Screen Capture Selected", this, "updateProfileOptions"));
                this.screenCaptureJRadioButton.setSelected(true);
            }
            else
            if(genericProfileDataWorkerType == GenericProfileDataWorkerType.SAVED_CAPTURE)
            {
                LogUtil.put(new Log("Saved Capture Selected", this, "updateProfileOptions"));
                this.savedCaptureJRadioButton.setSelected(true);
            }
            else
                if(genericProfileDataWorkerType == GenericProfileDataWorkerType.COMPARISON)
                {
                LogUtil.put(new Log("Checking Comparison Box", this, "updateProfileOptions"));
                this.captureComparisonJCheckBox.setSelected(true);
                }
                else
                    if(genericProfileDataWorkerType == GenericProfileDataWorkerType.MOTION)
                    {
                LogUtil.put(new Log("Checking Motion Box", this, "updateProfileOptions"));
                this.captureMotionAnalysisJCheckBox.setSelected(true);
                    }
        }

        if(!this.screenCaptureJRadioButton.isSelected() &&
            !this.savedCaptureJRadioButton.isSelected())
        {
            this.screenCaptureJRadioButton.setSelected(true);
            this.getSelectedGenericProfile().add(
                GenericProfileDataWorkerType.SCREEN_CAPTURE);
        }

        LogUtil.put(new Log("End", this, "updateProfileOptions"));
    }
    
    public javax.swing.JPanel getBlankGenericProfileActionsJPanel()
    {
        return blankGenericProfileActionsJPanel;
    }
    
    public void setBlankGenericProfileActionsJPanel(javax.swing.JPanel blankGenericProfileActionsJPanel)
    {
        this.blankGenericProfileActionsJPanel = blankGenericProfileActionsJPanel;
    }
    
    private GenericProfiles getGenericProfiles()
    {
        return genericProfiles;
    }
    
    private void setGenericProfiles(GenericProfiles genericProfiles)
    {
        this.genericProfiles = genericProfiles;
    }
    
    public GenericProfile getSelectedGenericProfile()
    {
        return selectedGenericProfile;
    }
    
    public void setSelectedGenericProfile(GenericProfile selectedGenericProfile)
    {
        this.selectedGenericProfile = selectedGenericProfile;
    }
    
    private void genericProfilesJListValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_genericProfilesJListValueChanged
    {//GEN-HEADEREND:event_genericProfilesJListValueChanged
// TODO add your handling code here:
        try
        {
            String profileNameString =
                (String) this.genericProfilesJList.getSelectedValue();
            
            this.updateProfileUI(profileNameString);
        }
        catch (Exception e)
        {
            LogUtil.put(new Log("Exception", this, "genericProfilesJListValueChanged", e));
        }
    }//GEN-LAST:event_genericProfilesJListValueChanged
    
    private void deleteProfileJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteProfileJButtonActionPerformed
    {//GEN-HEADEREND:event_deleteProfileJButtonActionPerformed
// TODO add your handling code here:
        try
        {
            Object object[] = this.genericProfilesJList.getSelectedValues();
            for(int index = 0; index < object.length; index++)
            {
                String nextSelectedValueString = (String) object[index];
                this.getGenericProfiles().remove(nextSelectedValueString);
            }
            
            this.selectFirstElement();
        }
        catch (Exception e)
        {
            LogUtil.put(new Log("Exception", this, "deleteProfileJButtonActionPerformed", e));
        }
    }//GEN-LAST:event_deleteProfileJButtonActionPerformed
    
    private void okNewProfileJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okNewProfileJButtonActionPerformed
    {//GEN-HEADEREND:event_okNewProfileJButtonActionPerformed
// TODO add your handling code here:
        try
        {
            String newProfileName = this.newProfileNameJTextField.getText();
            this.getGenericProfiles().add(newProfileName);
            
            this.genericProfilesJList.setModel(
                this.getGenericProfiles().getDefaultListModelHelper().getListModel());
            
            this.genericProfilesJList.setSelectedValue(newProfileName, true);
            
            this.newProfileJDialog.setVisible(false);
            
            this.updateProfileUI(newProfileName);
        }
        catch (Exception e)
        {
            LogUtil.put(new Log("Exception", this, "okNewProfileJButtonActionPerformed", e));
        }
    }//GEN-LAST:event_okNewProfileJButtonActionPerformed
    
    private void newProfileJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newProfileJButtonActionPerformed
    {//GEN-HEADEREND:event_newProfileJButtonActionPerformed
// TODO add your handling code here:
        this.newProfileJDialog.setVisible(true);
    }//GEN-LAST:event_newProfileJButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel blankGenericProfileActionsJPanel;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox captureComparisonJCheckBox;
    private javax.swing.JCheckBox captureMotionAnalysisJCheckBox;
    private javax.swing.JButton deleteProfileJButton;
    private javax.swing.JTabbedPane genericJTabbedPane;
    private javax.swing.JList genericProfilesJList;
    private javax.swing.JPanel genericProfilesJPanel;
    private javax.swing.JScrollPane genericProfilesJScrollPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton newProfileJButton;
    private javax.swing.JDialog newProfileJDialog;
    private javax.swing.JLabel newProfileNameJLabel;
    private javax.swing.JTextField newProfileNameJTextField;
    private javax.swing.JButton okNewProfileJButton;
    private javax.swing.JRadioButton savedCaptureJRadioButton;
    private javax.swing.JRadioButton screenCaptureJRadioButton;
    // End of variables declaration//GEN-END:variables
    
}
