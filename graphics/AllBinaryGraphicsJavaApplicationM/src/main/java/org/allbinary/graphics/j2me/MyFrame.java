/*
* AllBinary Open License Version 1
* Copyright (c) 2011 AllBinary
* 
* By agreeing to this license you and any business entity you represent are
* legally bound to the AllBinary Open License Version 1 legal agreement.
* 
* You may obtain the AllBinary Open License Version 1 legal agreement from
* AllBinary or the root directory of AllBinary's AllBinary Platform repository.
* 
* Created By: Travis Berthelot
* 
*/
package org.allbinary.graphics.j2me;

import org.allbinary.string.CommonStrings;
import java.io.File;
import java.awt.Dimension;
import javax.swing.JPanel;
import org.allbinary.dom.DomHelper;

import org.allbinary.graphics.j2me.dialog.NewWorkAreaJDialog;
import org.allbinary.graphics.j2me.workarea.WorkAreaJPanelInterface;
import org.allbinary.graphics.j2me.workarea.canvas.event.MyCanvasEvent;
import org.allbinary.graphics.j2me.workarea.canvas.event.MyCanvasEventService;
import org.allbinary.graphics.j2me.workarea.canvas.event.MyCanvasEventSource;
import org.allbinary.log.LOGGING;
import org.allbinary.logic.communication.log.GuiLog;
import org.allbinary.logic.communication.log.Log;
import org.allbinary.logic.communication.log.LogFactory;
import org.allbinary.logic.communication.log.LogUtil;
import org.allbinary.data.tree.dom.XslHelper;
import org.allbinary.graphics.j2me.dialog.RotateJDialog;
import org.allbinary.graphics.j2me.workarea.WorkAreaDom;
import org.allbinary.graphics.j2me.workarea.WorkAreaJPanel;
import org.allbinary.gui.dialog.FileJDialog;
import org.allbinary.gui.dialog.FileJDialogListenerInterface;
import org.allbinary.gui.dialog.HashMapJDialogListenerInterface;
import org.allbinary.logic.math.SmallIntegerSingletonFactory;
import org.allbinary.math.Angle;
import org.allbinary.math.AngleFactory;
import java.awt.GridLayout;
import java.util.HashMap;
import org.w3c.dom.Document;

public class MyFrame extends javax.swing.JFrame
        implements FileJDialogListenerInterface, HashMapJDialogListenerInterface,
        java.awt.event.KeyListener
{
    private final CommonStrings commonStrings = CommonStrings.getInstance();
    
    private final GuiLog guiLog = GuiLog.getInstance();
    private final XslHelper xslHelper = XslHelper.getInstance();
    
    private static final int MAXWORKAREAS = 10;
    private static int numberOfWorkAreas = 0;
    //private final String JAVA_TEMPLATE = "javaExport.xsl";
    private final String JAVA_TEMPLATE = "svgExport.xsl";
    private final String SAVEEXTENSION = ".gxml";
    private final String JAVAEXTENSION = ".javax";
    private static final String PATH = "G:/mnt/bc/mydev/work/graphics/AllBinaryGraphicsJavaApplication";
    private static final String SAVE_PATH = PATH + "/save";
    private static final String TEMPLATE_EXPORT_PATH = PATH + "/templates/export";
    private FileJDialog fileJDialog;
    private RotateJDialog rotateJDialog;

    public MyFrame()
    {
        initComponents();
        this.setSize(new Dimension(550, 400));
        this.mainJPanel.setSize(new Dimension(550, 400));
        this.jTabbedPane.setSize(new Dimension(550, 400));

        fileJDialog = new FileJDialog();
        fileJDialog.addFinishedListener(this);

        this.rotateJDialog = new RotateJDialog(this, false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton2 = new javax.swing.JButton();
        saveJButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        openJButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        animateJButton = new javax.swing.JButton();
        playJButton = new javax.swing.JButton();
        stopJjButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        mainJPanel = new javax.swing.JPanel();
        jTabbedPane = new javax.swing.JTabbedPane();
        statusJPanel = new javax.swing.JPanel();
        statusJLabel = new javax.swing.JLabel();
        menuJMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        newJMenuItem = new javax.swing.JMenuItem();
        openJMenuItem = new javax.swing.JMenuItem();
        saveJMenuItem = new javax.swing.JMenuItem();
        saveAsJMenuItem = new javax.swing.JMenuItem();
        exportJMenuItem1 = new javax.swing.JMenuItem();
        exitJMenuItem = new javax.swing.JMenuItem();
        viewJMenu = new javax.swing.JMenu();
        zoomInJMenuItem = new javax.swing.JMenuItem();
        zoomOutJMenuItem = new javax.swing.JMenuItem();
        objectJMenu = new javax.swing.JMenu();
        explodeAllJMenuItem = new javax.swing.JMenuItem();
        frameJMenu = new javax.swing.JMenu();
        previousFrameJMenuItem = new javax.swing.JMenuItem();
        nextFrameJMenuItem = new javax.swing.JMenuItem();
        removeJMenuItem = new javax.swing.JMenuItem();
        copyJMenuItem1 = new javax.swing.JMenuItem();
        insertAfterJMenuItem = new javax.swing.JMenuItem();
        insertBeforeJMenuItem = new javax.swing.JMenuItem();
        generateJMenu = new javax.swing.JMenu();
        centerJMenuItem = new javax.swing.JMenuItem();
        autoDamageJMenuItem = new javax.swing.JMenuItem();
        autoExplodeJMenuItem = new javax.swing.JMenuItem();
        autoGrowJMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        autoRotateGenerationJMenuItem = new javax.swing.JMenuItem();
        autoSheildMenuItem = new javax.swing.JMenuItem();
        autoShrinkJMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jButton2.setText("New");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        saveJButton.setText("Save");
        saveJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveJButton);

        jButton1.setText("Export");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        openJButton.setText("Open");
        openJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openJButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(openJButton);

        jButton3.setText("Copy");
        jToolBar1.add(jButton3);

        jButton4.setText("Insert Before");
        jToolBar1.add(jButton4);

        jButton41.setText("Insert After");
        jToolBar1.add(jButton41);

        jButton5.setText("Delete");
        jToolBar1.add(jButton5);

        animateJButton.setText("AnimateEdit");
        jToolBar1.add(animateJButton);

        playJButton.setText("Play");
        playJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                playJButtonMousePressed(evt);
            }
        });
        jToolBar1.add(playJButton);

        stopJjButton.setText("Stop");
        stopJjButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                stopJjButtonMousePressed(evt);
            }
        });
        jToolBar1.add(stopJjButton);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        mainJPanel.setLayout(new java.awt.GridLayout(1, 0));

        jTabbedPane.setMinimumSize(new java.awt.Dimension(550, 400));
        jTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneStateChanged(evt);
            }
        });
        mainJPanel.add(jTabbedPane);

        jPanel1.add(mainJPanel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        statusJPanel.setLayout(new java.awt.GridLayout(1, 0));

        statusJLabel.setText("Status Bar");
        statusJPanel.add(statusJLabel);

        getContentPane().add(statusJPanel, java.awt.BorderLayout.SOUTH);

        fileJMenu.setText("File");
        fileJMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileJMenuActionPerformed(evt);
            }
        });

        newJMenuItem.setText("New");
        newJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(newJMenuItem);

        openJMenuItem.setText("Open");
        openJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(openJMenuItem);

        saveJMenuItem.setText("Save");
        saveJMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                saveJMenuItemMousePressed(evt);
            }
        });
        fileJMenu.add(saveJMenuItem);

        saveAsJMenuItem.setText("SaveAs");
        fileJMenu.add(saveAsJMenuItem);

        exportJMenuItem1.setText("Export");
        exportJMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportJMenuItem1ActionPerformed(evt);
            }
        });
        fileJMenu.add(exportJMenuItem1);

        exitJMenuItem.setText("Exit");
        exitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(exitJMenuItem);

        menuJMenuBar.add(fileJMenu);

        viewJMenu.setText("View");

        zoomInJMenuItem.setText("Zoom In");
        zoomInJMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                zoomInJMenuItemMousePressed(evt);
            }
        });
        viewJMenu.add(zoomInJMenuItem);

        zoomOutJMenuItem.setText("Zoom Out");
        zoomOutJMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                zoomOutJMenuItemMousePressed(evt);
            }
        });
        viewJMenu.add(zoomOutJMenuItem);

        menuJMenuBar.add(viewJMenu);

        objectJMenu.setText("Objects");

        explodeAllJMenuItem.setText("Explode All");
        explodeAllJMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                explodeAllJMenuItemMousePressed(evt);
            }
        });
        objectJMenu.add(explodeAllJMenuItem);

        menuJMenuBar.add(objectJMenu);

        frameJMenu.setText("Frame");
        frameJMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frameJMenuActionPerformed(evt);
            }
        });

        previousFrameJMenuItem.setText("Previous");
        frameJMenu.add(previousFrameJMenuItem);

        nextFrameJMenuItem.setText("Next");
        frameJMenu.add(nextFrameJMenuItem);

        removeJMenuItem.setText("Remove");
        frameJMenu.add(removeJMenuItem);

        copyJMenuItem1.setText("Copy");
        frameJMenu.add(copyJMenuItem1);

        insertAfterJMenuItem.setText("Ins After");
        frameJMenu.add(insertAfterJMenuItem);

        insertBeforeJMenuItem.setText("Ins Before");
        frameJMenu.add(insertBeforeJMenuItem);

        menuJMenuBar.add(frameJMenu);

        generateJMenu.setText("Generate");

        centerJMenuItem.setText("Center");
        centerJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centerJMenuItemActionPerformed(evt);
            }
        });
        generateJMenu.add(centerJMenuItem);

        autoDamageJMenuItem.setText("Damage");
        generateJMenu.add(autoDamageJMenuItem);

        autoExplodeJMenuItem.setText("Explode");
        autoExplodeJMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                autoExplodeJMenuItemMousePressed(evt);
            }
        });
        generateJMenu.add(autoExplodeJMenuItem);

        autoGrowJMenuItem.setText("Grow");
        generateJMenu.add(autoGrowJMenuItem);

        jMenuItem1.setText("Mirror");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        generateJMenu.add(jMenuItem1);

        autoRotateGenerationJMenuItem.setText("Rotate");
        autoRotateGenerationJMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                autoRotateGenerationJMenuItemMousePressed(evt);
            }
        });
        generateJMenu.add(autoRotateGenerationJMenuItem);

        autoSheildMenuItem.setText("Shield");
        generateJMenu.add(autoSheildMenuItem);

        autoShrinkJMenuItem.setText("Shrink");
        generateJMenu.add(autoShrinkJMenuItem);

        menuJMenuBar.add(generateJMenu);

        jMenu1.setText("Help");
        menuJMenuBar.add(jMenu1);

        setJMenuBar(menuJMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private void explodeAllJMenuItemMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_explodeAllJMenuItemMousePressed
   {//GEN-HEADEREND:event_explodeAllJMenuItemMousePressed

       try
       {
           MyCanvasEventService.fire(new MyCanvasEvent((Object) new MyCanvasEventSource(
                   MyCanvasEventService.EXPLODE, null)));
       } catch (Exception e)
       {
           LogUtil.put(LogFactory.getInstance(commonStrings.EXCEPTION, this, "explodeAllJMenuItemMousePressed", e));
       }
   }//GEN-LAST:event_explodeAllJMenuItemMousePressed

   private void autoExplodeJMenuItemMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_autoExplodeJMenuItemMousePressed
   {//GEN-HEADEREND:event_autoExplodeJMenuItemMousePressed
       try
       {
           MyCanvasEventService.fire(new MyCanvasEvent((Object) new MyCanvasEventSource(
                   MyCanvasEventService.AUTOEXPLODE, null)));
       } catch (Exception e)
       {
           LogUtil.put(LogFactory.getInstance(commonStrings.EXCEPTION, this, "autoExplodeJMenuItemMousePressed", e));
       }
   }//GEN-LAST:event_autoExplodeJMenuItemMousePressed

   private void stopJjButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_stopJjButtonMousePressed
   {//GEN-HEADEREND:event_stopJjButtonMousePressed
       this.getSelectedWorkArea().stop();
   }//GEN-LAST:event_stopJjButtonMousePressed

   private void playJButtonMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_playJButtonMousePressed
   {//GEN-HEADEREND:event_playJButtonMousePressed
       this.getSelectedWorkArea().play();
   }//GEN-LAST:event_playJButtonMousePressed

   private void autoRotateGenerationJMenuItemMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_autoRotateGenerationJMenuItemMousePressed
   {//GEN-HEADEREND:event_autoRotateGenerationJMenuItemMousePressed
       this.rotateJDialog.setVisible(true);
       //10 degrees
       //this.getSelectedWorkArea().autoRotate(36, 360);
       //20 degrees
       //this.getSelectedWorkArea().autoRotate(18,360);
       //45 degrees
       //this.getSelectedWorkArea().autoRotate(8,360);
       //90 degrees
       //this.getSelectedWorkArea().autoRotate(4,360);
   }//GEN-LAST:event_autoRotateGenerationJMenuItemMousePressed

   private void zoomOutJMenuItemMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_zoomOutJMenuItemMousePressed
   {//GEN-HEADEREND:event_zoomOutJMenuItemMousePressed
       getSelectedWorkArea().changeZoom(-1);
   }//GEN-LAST:event_zoomOutJMenuItemMousePressed

   private void zoomInJMenuItemMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_zoomInJMenuItemMousePressed
   {//GEN-HEADEREND:event_zoomInJMenuItemMousePressed
       getSelectedWorkArea().changeZoom(1);
   }//GEN-LAST:event_zoomInJMenuItemMousePressed

   private void openJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_openJMenuItemActionPerformed
   {//GEN-HEADEREND:event_openJMenuItemActionPerformed
       this.openGraphics();
   }//GEN-LAST:event_openJMenuItemActionPerformed

   private void exportJMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exportJMenuItem1ActionPerformed
   {//GEN-HEADEREND:event_exportJMenuItem1ActionPerformed
       this.export();
   }//GEN-LAST:event_exportJMenuItem1ActionPerformed

   private void saveJMenuItemMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_saveJMenuItemMousePressed
   {//GEN-HEADEREND:event_saveJMenuItemMousePressed
       this.save();
   }//GEN-LAST:event_saveJMenuItemMousePressed

   private void jTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jTabbedPaneStateChanged
   {//GEN-HEADEREND:event_jTabbedPaneStateChanged
       this.updateSelectedWorkArea();
   }//GEN-LAST:event_jTabbedPaneStateChanged

   private void frameJMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_frameJMenuActionPerformed
   {//GEN-HEADEREND:event_frameJMenuActionPerformed
       // Add your handling code here:
   }//GEN-LAST:event_frameJMenuActionPerformed

   private void exitJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitJMenuItemActionPerformed
   {//GEN-HEADEREND:event_exitJMenuItemActionPerformed
       // Add your handling code here:
       System.exit(0);
   }//GEN-LAST:event_exitJMenuItemActionPerformed

   private void newJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newJMenuItemActionPerformed
   {//GEN-HEADEREND:event_newJMenuItemActionPerformed

       this.newGraphics();

   }//GEN-LAST:event_newJMenuItemActionPerformed

   private void fileJMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fileJMenuActionPerformed
   {//GEN-HEADEREND:event_fileJMenuActionPerformed
       // Add your handling code here:
   }//GEN-LAST:event_fileJMenuActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt)
   {//GEN-FIRST:event_exitForm
       System.exit(0);
   }//GEN-LAST:event_exitForm

    private void openJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openJButtonActionPerformed
        this.openGraphics();
    }//GEN-LAST:event_openJButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.newGraphics();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void centerJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centerJMenuItemActionPerformed
        try
        {
            MyCanvasEventService.fire(
                    new MyCanvasEvent((Object) new MyCanvasEventSource(
                    MyCanvasEventService.CENTER, null)));
        } catch (Exception e)
        {
            LogUtil.put(LogFactory.getInstance(commonStrings.EXCEPTION, this, "centerJMenuItemActionPerformed", e));
        }
    }//GEN-LAST:event_centerJMenuItemActionPerformed

private void saveJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJButtonActionPerformed
    this.save();
}//GEN-LAST:event_saveJButtonActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    this.export();
}//GEN-LAST:event_jButton1ActionPerformed

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    try
    {
        this.getSelectedWorkArea().autoMirror();
        /*
        MyCanvasEventService.fire(
        new MyCanvasEvent((Object)
        new MyCanvasEventSource(
        MyCanvasEventService.MIRROR, null)));
         * */
    } catch (Exception e)
    {
        LogUtil.put(LogFactory.getInstance(commonStrings.EXCEPTION, this, "centerJMenuItemActionPerformed", e));
    }
}//GEN-LAST:event_jMenuItem1ActionPerformed

    public void onFiles(File[] files)
    {
        try
        {
            LogUtil.put(LogFactory.getInstance("Reading: " + files, this, "onFiles"));

            for (int index = 0; index < files.length; index++)
            {
                Document document = DomHelper.getInstance().createDocument(files[index]);

                WorkAreaJPanel workAreaJPanel = new WorkAreaJPanel(
                        new WorkAreaDom(document), this.getSize());

                workAreaJPanel.setLayout(new GridLayout(1, 1));

                this.add((WorkAreaJPanelInterface) workAreaJPanel);
            }

            this.fileJDialog.setVisible(false);
        } catch (Exception e)
        {
            LogUtil.put(LogFactory.getInstance(commonStrings.EXCEPTION, this, "onFiles", e));
        }
    }

    private void newGraphics()
    {
        try
        {
            String newName = "graphic" + this.numberOfWorkAreas;

            Dimension dim = this.getSize();

            NewWorkAreaJDialog newDialog = new NewWorkAreaJDialog(this, false, dim, newName);

            // wait();
        } catch (Exception e)
        {
            if (LOGGING.contains(LOGGING.MENUEVENT))
            {
                guiLog.put(commonStrings.EXCEPTION, this, "newJMenuItemActionPerformed", e);
            }
        }
    }

    private void openGraphics()
    {
        try
        {
            LogUtil.put(LogFactory.getInstance("Starting", this, "openImageJMenuItemActionPerformed"));
            fileJDialog.setVisible(true);
        } catch (Exception e)
        {
            if (LOGGING.contains(LOGGING.MENUEVENT))
            {
                guiLog.put(commonStrings.EXCEPTION, this, "open", e);
            }
        }
    }

    private void export()
    {
        try
        {
            WorkAreaJPanelInterface workAreaJPanel = (WorkAreaJPanelInterface) this.jTabbedPane.getSelectedComponent();
            File file = new File(this.SAVE_PATH + "/" + workAreaJPanel.getName() + JAVAEXTENSION);
            Document document = workAreaJPanel.toDocument();

            LogUtil.put(LogFactory.getInstance("Export: " + DomHelper.getInstance().toString(document), this, "exportJMenuItem1ActionPerformed"));

            xslHelper.export(file, this.TEMPLATE_EXPORT_PATH + "/" + this.JAVA_TEMPLATE, document);
        } catch (Exception e)
        {
            if (LOGGING.contains(LOGGING.MENUEVENT))
            {
                guiLog.put(commonStrings.EXCEPTION, this, "export", e);
            }
        }
    }

    private void save()
    {
        try
        {
            WorkAreaJPanelInterface workAreaJPanel = (WorkAreaJPanelInterface) this.jTabbedPane.getSelectedComponent();
            DomHelper.getInstance().save(new File(this.SAVE_PATH + "/" + workAreaJPanel.getName() + SAVEEXTENSION), workAreaJPanel.toDocument());
        } catch (Exception e)
        {
            if (LOGGING.contains(LOGGING.MENUEVENT))
            {
                guiLog.put(commonStrings.EXCEPTION, this, commonStrings.SAVE, e);
            }
        }
    }

    public void onHashMap(HashMap hashMap)
            throws Exception
    {
        Integer angleIncrementInteger = (Integer) hashMap.get(Integer.valueOf(0));
        Integer totalRotationInteger = (Integer) hashMap.get(Integer.valueOf(1));

        this.getSelectedWorkArea().autoRotate(
                angleIncrementInteger.intValue(),
                totalRotationInteger.intValue());
    }

    private WorkAreaJPanelInterface getSelectedWorkArea()
    {
        return (WorkAreaJPanelInterface) this.jTabbedPane.getSelectedComponent();
    }

    public void updateSelectedWorkArea()
    {
        int numberOfTabs = this.jTabbedPane.getTabCount();
        for (int index = 0; index < numberOfTabs; index++)
        {
            WorkAreaJPanelInterface workAreaJPanel = (WorkAreaJPanelInterface) this.jTabbedPane.getComponentAt(index);
            workAreaJPanel.deselect();
        }

        WorkAreaJPanelInterface workAreaJPanel = (WorkAreaJPanelInterface) this.jTabbedPane.getSelectedComponent();
        if (workAreaJPanel != null)
        {
            workAreaJPanel.select();
        }
    }

    public void add(WorkAreaJPanelInterface newCanvasInterface) throws Exception
    {
        try
        {
            this.numberOfWorkAreas++;
            if (this.numberOfWorkAreas == MAXWORKAREAS)
            {
                throw new Exception();
            }
            jTabbedPane.addTab(newCanvasInterface.getName(), (JPanel) newCanvasInterface);

            jTabbedPane.setSelectedComponent((JPanel) newCanvasInterface);

            //WorkAreaJPanel newCanvas = (WorkAreaJPanelInterface) newCanvasInterface;
            Thread animationThread = new Thread((Runnable) newCanvasInterface);
            animationThread.start();

            this.updateSelectedWorkArea();
        } catch (Exception e)
        {
            if (LOGGING.contains(LOGGING.GRAPHICSCREATION))
            {
                guiLog.put(commonStrings.EXCEPTION, this, "addNewCanvas", e);
            }
        }
    }

    public void keyPressed(java.awt.event.KeyEvent keyEvent)
    {
        this.getSelectedWorkArea().keyPressed(keyEvent);
    }

    public void keyReleased(java.awt.event.KeyEvent keyEvent)
    {
    }

    public void keyTyped(java.awt.event.KeyEvent keyEvent)
    {
    }

    public static void main(String args[])
    {
        try
        {
            AngleFactory.getInstance();//.init();
            SmallIntegerSingletonFactory.getInstance().init();
            new MyFrame().show();
        } catch (Exception e)
        {
            LogUtil.put(LogFactory.getInstance(CommonStrings.getInstance().EXCEPTION, null, "main", e));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton animateJButton;
    private javax.swing.JMenuItem autoDamageJMenuItem;
    private javax.swing.JMenuItem autoExplodeJMenuItem;
    private javax.swing.JMenuItem autoGrowJMenuItem;
    private javax.swing.JMenuItem autoRotateGenerationJMenuItem;
    private javax.swing.JMenuItem autoSheildMenuItem;
    private javax.swing.JMenuItem autoShrinkJMenuItem;
    private javax.swing.JMenuItem centerJMenuItem;
    private javax.swing.JMenuItem copyJMenuItem1;
    private javax.swing.JMenuItem exitJMenuItem;
    private javax.swing.JMenuItem explodeAllJMenuItem;
    private javax.swing.JMenuItem exportJMenuItem1;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JMenu frameJMenu;
    private javax.swing.JMenu generateJMenu;
    private javax.swing.JMenuItem insertAfterJMenuItem;
    private javax.swing.JMenuItem insertBeforeJMenuItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel mainJPanel;
    private javax.swing.JMenuBar menuJMenuBar;
    private javax.swing.JMenuItem newJMenuItem;
    private javax.swing.JMenuItem nextFrameJMenuItem;
    private javax.swing.JMenu objectJMenu;
    private javax.swing.JButton openJButton;
    private javax.swing.JMenuItem openJMenuItem;
    private javax.swing.JButton playJButton;
    private javax.swing.JMenuItem previousFrameJMenuItem;
    private javax.swing.JMenuItem removeJMenuItem;
    private javax.swing.JMenuItem saveAsJMenuItem;
    private javax.swing.JButton saveJButton;
    private javax.swing.JMenuItem saveJMenuItem;
    protected static javax.swing.JLabel statusJLabel;
    private javax.swing.JPanel statusJPanel;
    private javax.swing.JButton stopJjButton;
    private javax.swing.JMenu viewJMenu;
    private javax.swing.JMenuItem zoomInJMenuItem;
    private javax.swing.JMenuItem zoomOutJMenuItem;
    // End of variables declaration//GEN-END:variables
}
