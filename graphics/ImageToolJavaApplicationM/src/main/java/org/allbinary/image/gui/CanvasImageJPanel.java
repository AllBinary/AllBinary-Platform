/*
 * AllBinary Open License Version 1
 * Copyright (c) 2022 AllBinary
 * 
 * By agreeing to this license you and any business entity you represent are
 * legally bound to the AllBinary Open License Version 1 legal agreement.
 * 
 * You may obtain the AllBinary Open License Version 1 legal agreement from
 * AllBinary or the root directory of AllBinary's AllBinary Platform repository.
 * 
 * Created By: Travis Berthelot
 * 
 */
package org.allbinary.image.gui;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

import org.allbinary.logic.communication.log.LogFactory;
import org.allbinary.logic.communication.log.LogUtil;
import org.allbinary.string.CommonSeps;
import org.allbinary.string.CommonStrings;
import org.allbinary.logic.string.StringMaker;
import org.allbinary.logic.string.StringUtil;
import org.allbinary.media.image.CanvasExpandUtil;
import org.allbinary.media.image.ImageProcessedVisitor;
import org.allbinary.media.image.ImageProcessorInput;
import org.allbinary.media.image.ImageStrings;
import org.allbinary.media.image.CanvasTrimUtil;

/**
 *
 * @author User
 */
public class CanvasImageJPanel extends javax.swing.JPanel
    implements ImageProcessedVisitor {

    private final CommonStrings commonStrings = CommonStrings.getInstance();
    private final CommonSeps commonSeps = CommonSeps.getInstance();
    
    private final ImageStrings imageStrings = ImageStrings.getInstance();
    
    private ImageProcessorInput imageProcessorInput;

    private BufferedImage result;

    public CanvasImageJPanel(final ImageProcessorInput imageProcessorInput) 
       throws Exception 
    {
        super();

        initComponents();
        this.imageProcessorInput = imageProcessorInput;

        //setUI((PanelUI)UIManager.getUI(this));
    }

    public void process() {
        new Thread() {

            public void run() {
                try {
                    final CanvasTrimUtil canvasTrimUtil = CanvasTrimUtil.getInstance();
                    final CanvasExpandUtil canvasExpandUtil = CanvasExpandUtil.getInstance();

                    final int leftReduction = Integer.valueOf(widthReductionTextField1.getText());
                    final int topReduction = Integer.valueOf(heightReductionTextField1.getText());
                    final int widthReduction = Integer.valueOf(widthReductionTextField.getText());
                    final int heightReduction = Integer.valueOf(heightReductionTextField.getText());
                    
                    if(leftReduction <= 0 || topReduction <= 0 || widthReduction <= 0 || heightReduction <= 0) {
                        canvasTrimUtil.process(CanvasImageJPanel.this.getImageProcessorInput(), -leftReduction, -topReduction, -widthReduction, -heightReduction, CanvasImageJPanel.this);
                    } else {
                        canvasExpandUtil.process(CanvasImageJPanel.this.getImageProcessorInput(), leftReduction, topReduction, CanvasImageJPanel.this);
                    }

                } catch (Exception e) {
                    LogUtil.put(LogFactory.getInstance(commonStrings.EXCEPTION, this, CommonStrings.getInstance().RUN, e));
                }
            }
        }.start();
    }
    /*
    public void paint(Graphics graphics) {
    LogUtil.put(LogFactory.getInstance("Painting", this, "paint"));
     */
    //graphics.setColor(BasicColors.BLUE.toColor());
    //graphics.fillRect(0, 0, getWidth(),getHeight());
      /*
    int columnIndex = 0;
    int rowIndex = 0;
    for(int index = 0; index < bufferedImageArray.length; index++)
    {
    if(index/9 != 0 && index % 9 == 0)
    {
    rowIndex ++;
    columnIndex = 0;
    }
    graphics.drawImage(this.bufferedImageArray[index],
    bufferedImageArray[index].getWidth(null) * columnIndex, 
    bufferedImageArray[index].getHeight(null) * rowIndex, 
    this.bufferedImageArray[index].getWidth(null),
    this.bufferedImageArray[index].getHeight(null), null);
    columnIndex++;
    }
     */
    /*
    this.jPanel1.update(graphics);
    }
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        writeOverOriginalJCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel() {             public void paint(Graphics graphics) {                 if (CanvasImageJPanel.this.result != null) {                     graphics.drawImage(CanvasImageJPanel.this.result, 0, 0, CanvasImageJPanel.this.result.getWidth(null), CanvasImageJPanel.this.result.getHeight(null), null);                 }             }         };
        generateJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        widthReductionTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        heightReductionTextField = new javax.swing.JTextField();
        widthReductionTextField1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        heightReductionTextField1 = new javax.swing.JTextField();

        writeOverOriginalJCheckBox.setSelected(true);
        writeOverOriginalJCheckBox.setText("Write Over Original");
        writeOverOriginalJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeOverOriginalJCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );

        generateJButton.setText("Generate");
        generateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateJButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Results:");

        jLabel5.setText("Right:");

        widthReductionTextField.setText("0");
        widthReductionTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthReductionTextFieldActionPerformed(evt);
            }
        });

        jLabel6.setText("Bottom");

        heightReductionTextField.setText("0");

        widthReductionTextField1.setText("0");
        widthReductionTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthReductionTextField1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Top");

        jLabel8.setText("Left:");

        heightReductionTextField1.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(widthReductionTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(widthReductionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(heightReductionTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(heightReductionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(140, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 16, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(heightReductionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(widthReductionTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(heightReductionTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(widthReductionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(78, 78, 78))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(writeOverOriginalJCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(generateJButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generateJButton)
                    .addComponent(writeOverOriginalJCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void writeOverOriginalJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeOverOriginalJCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_writeOverOriginalJCheckBoxActionPerformed

    private void generateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateJButtonActionPerformed
        this.process();
    }//GEN-LAST:event_generateJButtonActionPerformed

    private void widthReductionTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_widthReductionTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_widthReductionTextFieldActionPerformed

    private void widthReductionTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_widthReductionTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_widthReductionTextField1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generateJButton;
    private javax.swing.JTextField heightReductionTextField;
    private javax.swing.JTextField heightReductionTextField1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField widthReductionTextField;
    private javax.swing.JTextField widthReductionTextField1;
    private javax.swing.JCheckBox writeOverOriginalJCheckBox;
    // End of variables declaration//GEN-END:variables

   public ImageProcessorInput getImageProcessorInput()
   {
      return imageProcessorInput;
   }

   public void setImageProcessorInput(ImageProcessorInput imageProcessorInput)
   {
      this.imageProcessorInput = imageProcessorInput;
   }

   @Override
   public void visit(final BufferedImage generatedBufferedImage, final String name, final int index) throws IOException {
       
       LogUtil.put(LogFactory.getInstance(CommonStrings.getInstance().VISIT, this, CommonStrings.getInstance().VISIT));
       
       this.result = generatedBufferedImage;
       //ImageJ2SERotationUtil.getInstance().createSpriteImage(
       //);

       this.getParent().repaint();

       File file = imageProcessorInput.getFiles()[index];

       if (!this.writeOverOriginalJCheckBox.isSelected()) {
           String filePath = file.getAbsolutePath();
           final int extensionIndex = filePath.indexOf(imageStrings.PNG_EXTENSION);
           filePath = new StringBuilder().append(filePath.substring(0, extensionIndex)).append(commonSeps.UNDERSCORE).append(name).append(imageStrings.PNG_EXTENSION).toString();
           file = new File(filePath);
       }

       final boolean isWritten = 
               ImageIO.write((RenderedImage) CanvasImageJPanel.this.result, imageStrings.PNG, file);

       LogUtil.put(LogFactory.getInstance(new StringMaker().append("File: ").append(StringUtil.getInstance().toString(file)).append(" Wrote: ").append(isWritten).toString(), this, CommonStrings.getInstance().RUN));
   }
   
}
