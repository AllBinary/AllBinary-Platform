/*
* AllBinary Open License Version 1
* Copyright (c) 2011 AllBinary
* 
* By agreeing to this license you and any business entity you represent are
* legally bound to the AllBinary Open License Version 1 legal agreement.
* 
* You may obtain the AllBinary Open License Version 1 legal agreement from
* AllBinary or the root directory of AllBinary's AllBinary Platform repository.
* 
* Created By: Travis Berthelot
* 
*/
package org.allbinary.image.gui;

import org.allbinary.media.image.ImageProcessorInput;
import org.allbinary.media.image.ImageProcessorInputCompositeInterface;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import javax.imageio.ImageIO;
import org.allbinary.string.CommonStrings;

import org.allbinary.logic.communication.log.LogFactory;
import org.allbinary.logic.communication.log.LogUtil;
import org.allbinary.logic.string.StringUtil;
import org.allbinary.media.image.ImageStrings;
import org.allbinary.media.image.MirrorImageUtil;

public class MirrorImageJPanel extends javax.swing.JPanel
   implements ImageProcessorInputCompositeInterface
{
    private final CommonStrings commonStrings = CommonStrings.getInstance();
    private final ImageStrings imageStrings = ImageStrings.getInstance();

   private ImageProcessorInput imageProcessorInput;
   private BufferedImage result;

   public MirrorImageJPanel(ImageProcessorInput imageProcessorInput)
      throws Exception
   {
      super();

      LogUtil.put(LogFactory.getInstance("Starting", this, this.commonStrings.CONSTRUCTOR));

      initComponents();
      this.imageProcessorInput = imageProcessorInput;

   //setUI((PanelUI)UIManager.getUI(this));
   }

   public void process()
   {
      new Thread()
      {

         public void run()
         {
            try
            {
               //BufferedImage generatedBufferedImageArray[];

               ImageProcessorInput imageProcessorInput =
                  MirrorImageJPanel.this.getImageProcessorInput();
               BufferedImage[] bufferedImageArray =
                  imageProcessorInput.getBufferedImageArray();

               for (int index = 0; index < bufferedImageArray.length; index++)
               {
                  //generatedBufferedImageArray =
                  MirrorImageJPanel.this.result =
                     MirrorImageUtil.getInstance().getImage(
                     bufferedImageArray[index],
                     MirrorImageJPanel.this.verticleJCheckBox.isSelected(),
                     MirrorImageJPanel.this.horizontalJCheckBox.isSelected());

                  File file = imageProcessorInput.getFiles()[index];

                  if (MirrorImageJPanel.this.writeOverOriginalJRadioButton.isSelected())
                  {
                  }
                  else
                     if (MirrorImageJPanel.this.renameJRadioButton.isSelected())
                  {
                     String filePath = file.getAbsolutePath();
                     
                     int extensionIndex = filePath.indexOf(imageStrings.PNG_EXTENSION);
                     
                     filePath = filePath.substring(0, extensionIndex) + "_mirror" + imageStrings.PNG_EXTENSION;
                     
                     LogUtil.put(LogFactory.getInstance("Renamed File: " + filePath, this, commonStrings.RUN));
                     
                     file = new File(filePath);
                  }

                     boolean isWritten = ImageIO.write(
                        (RenderedImage) MirrorImageJPanel.this.result,
                        imageStrings.PNG, file);
                  
                  LogUtil.put(LogFactory.getInstance("File: " + file + " Wrote: " + isWritten, this, commonStrings.RUN));
                  MirrorImageJPanel.this.getParent().repaint();
               }

            }
            catch (Exception e)
            {
               LogUtil.put(LogFactory.getInstance(commonStrings.EXCEPTION, this, commonStrings.RUN, e));
            }
         }
      }.start();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLayeredPane1 = new javax.swing.JLayeredPane();
      buttonGroup = new javax.swing.ButtonGroup();
      jPanel1 = new javax.swing.JPanel(){
         public void paint(Graphics graphics)
         {
            if(MirrorImageJPanel.this.result != null)
            {
               graphics.drawImage(MirrorImageJPanel.this.result, 0, 0,
                  MirrorImageJPanel.this.result.getWidth(null),
                  MirrorImageJPanel.this.result.getHeight(null), null);
            }
         }
      }
      ;
      jPanel2 = new javax.swing.JPanel();
      horizontalJCheckBox = new javax.swing.JCheckBox();
      verticleJCheckBox = new javax.swing.JCheckBox();
      generateJButton = new javax.swing.JButton();
      renameJRadioButton = new javax.swing.JRadioButton();
      writeOverOriginalJRadioButton = new javax.swing.JRadioButton();
      jPanel3 = new javax.swing.JPanel();
      jLabel2 = new javax.swing.JLabel();

      org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 522, Short.MAX_VALUE)
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 230, Short.MAX_VALUE)
      );

      horizontalJCheckBox.setSelected(true);
      horizontalJCheckBox.setText("Horizontal");
      horizontalJCheckBox.setEnabled(false);

      verticleJCheckBox.setText("Verticle");
      verticleJCheckBox.setEnabled(false);

      generateJButton.setText("Generate");
      generateJButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            generateJButtonActionPerformed(evt);
         }
      });

      renameJRadioButton.setText("Save As filename_mirror");
      renameJRadioButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            renameJRadioButtonActionPerformed(evt);
         }
      });

      writeOverOriginalJRadioButton.setText("Write Over Original");

      org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel2Layout.createSequentialGroup()
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(verticleJCheckBox)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(horizontalJCheckBox)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(writeOverOriginalJRadioButton)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(renameJRadioButton)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(generateJButton)
            .add(37, 37, 37))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel2Layout.createSequentialGroup()
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(horizontalJCheckBox)
               .add(verticleJCheckBox)
               .add(writeOverOriginalJRadioButton)
               .add(renameJRadioButton)
               .add(generateJButton))
            .addContainerGap())
      );

      jLabel2.setText("Results:");

      org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel3Layout.createSequentialGroup()
            .add(jLabel2)
            .addContainerGap(433, Short.MAX_VALUE))
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jLabel2)
      );

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
         .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
         .add(layout.createSequentialGroup()
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
   }// </editor-fold>//GEN-END:initComponents
    private void generateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateJButtonActionPerformed

       this.process();

}//GEN-LAST:event_generateJButtonActionPerformed

private void renameJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameJRadioButtonActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_renameJRadioButtonActionPerformed
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup;
   private javax.swing.JButton generateJButton;
   private javax.swing.JCheckBox horizontalJCheckBox;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLayeredPane jLayeredPane1;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JRadioButton renameJRadioButton;
   private javax.swing.JCheckBox verticleJCheckBox;
   private javax.swing.JRadioButton writeOverOriginalJRadioButton;
   // End of variables declaration//GEN-END:variables
   public ImageProcessorInput getImageProcessorInput()
   {
      return imageProcessorInput;
   }

   public void setImageProcessorInput(ImageProcessorInput imageProcessorInput)
   {
      this.imageProcessorInput = imageProcessorInput;
   }
}
