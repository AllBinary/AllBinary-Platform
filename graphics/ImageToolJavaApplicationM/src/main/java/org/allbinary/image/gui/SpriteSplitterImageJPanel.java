/*
* AllBinary Open License Version 1
* Copyright (c) 2011 AllBinary
* 
* By agreeing to this license you and any business entity you represent are
* legally bound to the AllBinary Open License Version 1 legal agreement.
* 
* You may obtain the AllBinary Open License Version 1 legal agreement from
* AllBinary or the root directory of AllBinary's AllBinary Platform repository.
* 
* Created By: Travis Berthelot
* 
*/
package org.allbinary.image.gui;

import org.allbinary.media.image.ImageProcessorInput;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import org.allbinary.logic.string.CommonSeps;
import org.allbinary.logic.string.CommonStrings;

import org.allbinary.logic.communication.log.LogFactory;
import org.allbinary.logic.communication.log.LogUtil;
import org.allbinary.media.image.ImageProcessedVisitor;
import org.allbinary.media.image.ImageStrings;
import org.allbinary.media.image.SpriteSplitterUtil;

public class SpriteSplitterImageJPanel extends javax.swing.JPanel
        implements ImageProcessedVisitor {

    private final CommonStrings commonStrings = CommonStrings.getInstance();
    private final ImageStrings imageStrings = ImageStrings.getInstance();
    
    private ImageProcessorInput imageProcessorInput;

    private BufferedImage result;

    public SpriteSplitterImageJPanel(final ImageProcessorInput imageProcessorInput) 
       throws Exception 
    {
        super();

        initComponents();
        this.imageProcessorInput = imageProcessorInput;

    //setUI((PanelUI)UIManager.getUI(this));
    }

    public void process() {
        new Thread() {

            public void run() {
                try {
                    final String spriteType = (String) spriteTypeJComboBox.getSelectedItem();
                    final Integer totalFrames = Integer.valueOf( (String) totalFramesJComboBox.getSelectedItem());
                    final Integer totalAnimations = Integer.valueOf( (String) totalAnimationsJComboBox.getSelectedItem());

                    SpriteSplitterUtil.getInstance().process(SpriteSplitterImageJPanel.this.getImageProcessorInput(), totalFrames, totalAnimations, spriteType, SpriteSplitterImageJPanel.this);                        

                } catch (Exception e) {
                    LogUtil.put(LogFactory.getInstance(commonStrings.EXCEPTION, this, CommonStrings.getInstance().RUN, e));
                }
            }
        }.start();
    }
    /*
    public void paint(Graphics graphics) {
    LogUtil.put(LogFactory.getInstance("Painting", this, "paint"));
     */
    //graphics.setColor(BasicColors.BLUE.toColor());
    //graphics.fillRect(0, 0, getWidth(),getHeight());
      /*
    int columnIndex = 0;
    int rowIndex = 0;
    for(int index = 0; index < bufferedImageArray.length; index++)
    {
    if(index/9 != 0 && index % 9 == 0)
    {
    rowIndex ++;
    columnIndex = 0;
    }
    graphics.drawImage(this.bufferedImageArray[index],
    bufferedImageArray[index].getWidth(null) * columnIndex, 
    bufferedImageArray[index].getHeight(null) * rowIndex, 
    this.bufferedImageArray[index].getWidth(null),
    this.bufferedImageArray[index].getHeight(null), null);
    columnIndex++;
    }
     */
    /*
    this.jPanel1.update(graphics);
    }
     */

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jPanel1 = new javax.swing.JPanel(){
         public void paint(Graphics graphics)
         {
            if(SpriteSplitterImageJPanel.this.result != null)
            {
               graphics.drawImage(SpriteSplitterImageJPanel.this.result, 0, 0,
                  SpriteSplitterImageJPanel.this.result.getWidth(null), SpriteSplitterImageJPanel.this.result.getHeight(null), null);
            }
         }
      }
      ;
      jPanel2 = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      generateJButton = new javax.swing.JButton();
      totalFramesJComboBox = new javax.swing.JComboBox();
      jLabel4 = new javax.swing.JLabel();
      totalAnimationsJComboBox = new javax.swing.JComboBox();
      jLabel5 = new javax.swing.JLabel();
      spriteTypeJComboBox = new javax.swing.JComboBox();
      jLabel3 = new javax.swing.JLabel();
      writeOverOriginalJCheckBox = new javax.swing.JCheckBox();
      jPanel3 = new javax.swing.JPanel();
      jLabel2 = new javax.swing.JLabel();

      org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 436, Short.MAX_VALUE)
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 227, Short.MAX_VALUE)
      );

      generateJButton.setText("Generate");
      generateJButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            generateJButtonActionPerformed(evt);
         }
      });

      totalFramesJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "3", "4", "5", "6", "7", "8", "9", "10" }));
      totalFramesJComboBox.setSelectedIndex(1);
      totalFramesJComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            //totalFramesJComboBoxActionPerformed(evt);
         }
      });

      totalAnimationsJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
      totalAnimationsJComboBox.setSelectedIndex(3);
      totalAnimationsJComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            //totalAnimationsJComboBoxActionPerformed(evt);
         }
      });
      
      spriteTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { SpriteSplitterUtil.getInstance().DIRECTIONAL_ANIMATIONS, SpriteSplitterUtil.getInstance().HORIZONTAL_ANIMATIONS
              //, SpriteSplitterUtil.getInstance().VERTICLE_ANIMATIONS
      }));
      spriteTypeJComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            totalAngleJComboBoxActionPerformed(evt);
         }
      });

      jLabel3.setText("Type:");
      jLabel4.setText("F:");
      jLabel5.setText("A:");

      //writeOverOriginalJCheckBox.setSelected(true);
      writeOverOriginalJCheckBox.setText("Write Over Original");

      org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel2Layout.createSequentialGroup()
            .add(8, 8, 8)
            .add(jLabel1)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel4)
            .add(totalFramesJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel5)
            .add(totalAnimationsJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel3)
            .add(spriteTypeJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(writeOverOriginalJCheckBox)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(generateJButton)
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
            .add(jLabel1)
            .add(generateJButton)
            .add(jLabel4)
            .add(totalFramesJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jLabel5)
            .add(totalAnimationsJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jLabel3)
            .add(spriteTypeJComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(writeOverOriginalJCheckBox))
      );

      jLabel2.setText("Results:");

      org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel3Layout.createSequentialGroup()
            .add(jLabel2)
            .addContainerGap(377, Short.MAX_VALUE))
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jLabel2)
      );

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
         .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
   }// </editor-fold>//GEN-END:initComponents
    private void generateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateJButtonActionPerformed
        // TODO add your handling code here:
        this.process();
}//GEN-LAST:event_generateJButtonActionPerformed

private void totalAngleJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalAngleJComboBoxActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_totalAngleJComboBoxActionPerformed

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton generateJButton;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JComboBox totalFramesJComboBox;
   private javax.swing.JComboBox totalAnimationsJComboBox;
   private javax.swing.JComboBox spriteTypeJComboBox;
   private javax.swing.JCheckBox writeOverOriginalJCheckBox;
   // End of variables declaration//GEN-END:variables

   public ImageProcessorInput getImageProcessorInput()
   {
      return imageProcessorInput;
   }

   public void setImageProcessorInput(ImageProcessorInput imageProcessorInput)
   {
      this.imageProcessorInput = imageProcessorInput;
   }

   public void visit(final BufferedImage generatedBufferedImage, final String name, final int index) throws IOException {
       this.result = generatedBufferedImage;
       //ImageJ2SERotationUtil.getInstance().createSpriteImage(
       //);

       this.getParent().repaint();

       File file = imageProcessorInput.getFiles()[index];

       if (!this.writeOverOriginalJCheckBox.isSelected()) {
           String filePath = file.getAbsolutePath();
           int extensionIndex = filePath.indexOf(imageStrings.PNG_EXTENSION);
           filePath = new StringBuilder().append(filePath.substring(0, extensionIndex)).append(CommonSeps.getInstance().UNDERSCORE).append(name).append(imageStrings.PNG_EXTENSION).toString();
           file = new File(filePath);
       }

       final boolean isWritten = 
               ImageIO.write((RenderedImage) SpriteSplitterImageJPanel.this.result, imageStrings.PNG, file);

       LogUtil.put(LogFactory.getInstance("File: " + file + " Wrote: " + isWritten, this, CommonStrings.getInstance().RUN));
   }
}
