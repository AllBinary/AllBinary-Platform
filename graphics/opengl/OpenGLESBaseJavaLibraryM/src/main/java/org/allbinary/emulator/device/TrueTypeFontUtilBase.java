/*
 * AllBinary Open License Version 1
 * Copyright (c) 2025 AllBinary
 * 
 * By agreeing to this license you and any business entity you represent are
 * legally bound to the AllBinary Open License Version 1 legal agreement.
 * 
 * You may obtain the AllBinary Open License Version 1 legal agreement from
 * AllBinary or the root directory of AllBinary's AllBinary Platform repository.
 * 
 * Created By: Travis Berthelot
 * 
 */
package org.allbinary.emulator.device;

import org.allbinary.graphics.font.MyFont;

/**
 *
 * @author User
 */
public class TrueTypeFontUtilBase {

    //Include special characters 2 times handles the Android Studio issue.
    public final String shortPattern = " 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.?!$%`¬\"£^&*()_+-=[]{};'#:@~,/<>\\|®©";
    //public final String pattern = " 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.?!$%`¬¬\"££^&*()_+-=[]{};'#:@~,/<>\\|®®©©";
    public final String pattern = " 0123456789AB   CDEFGHIJKLMNO   PQRSTUVWXYZab   cdefghijklmno   pqrstuvwxyz.?   !$%`¬¬\"££^&*(   )_+-=[]{};'#:   @~,/<>\\|®®©©";

    public final short[] charArray = //new short[255];
    {
        //0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6f, 0x50, 0x56, 0x6b, 0x51, 0x52, 0x5a, 0x6a, 0x5c, 0x60, 0x5b, 0x62, 0x72, 0x63, 0x4b, 0x73, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0x6c, 0x69, 0x74, 0x64, 0x75, 0x4c, 0x70, 0xb, 0xc, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x65, 0x76, 0x66, 0x59, 0x61, 0x53, 0x2b, 0x2c, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x67, 0x77, 0x68, 0x71, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7b, 0x0, 0x0, 0x55, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
        0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6f,0x50,0x56,0x6b,0x51,0x52,0x5a,0x6a,0x5c,0x60,0x5b,0x62,0x72,0x63,0x4b,0x73,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,0x6c,0x69,0x74,0x64,0x75,0x4c,0x70,0xb,0xc,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x65,0x76,0x66,0x59,0x61,0x53,0x2b,0x2c,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x67,0x77,0x68,0x71,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x58,0x0,0x0,0x0,0x0,0x0,0x7b,0x0,0x0,0x55,0x0,0x79,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
        //0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x73,0x50,0x58,0x6f,0x51,0x52,0x5e,0x6e,0x60,0x64,0x5f,0x66,0x76,0x67,0x4b,0x77,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,0x70,0x6d,0x78,0x68,0x79,0x4c,0x74,0xb,0xc,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x69,0x7a,0x6a,0x5d,0x65,0x53,0x2b,0x2c,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x6b,0x7b,0x6c,0x75,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5c,0x0,0x0,0x0,0x0,0x0,0x83,0x0,0x0,0x57,0x0,0x7f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x82,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
    };            

    protected final int[] _characterWidth = new int[pattern.length()]; //256
    protected final char[] characterArray = new char[1];
    protected final int size = pattern.length();
    protected final int lastCapIndex = pattern.indexOf('Z');

    public javax.microedition.lcdui.Font currentFont = javax.microedition.lcdui.Font.getDefaultFont();

    public final int scale;
    public final int CELLS_PER_ROW;
    public final int fontSize;
    public final int baseCharWidth;
    public final int cellSize;
    public final int textureSize;
    public final int actualCellsPerRow;
    //public final int extraCellsPerRow = actualCellsPerRow - CELLS_PER_ROW;
        
    public TrueTypeFontUtilBase(final int scale) {
        
        this.scale = scale;
        //This needs to initialize after scale and in the OpenGL thread when running JOGL.
        MyFont.getInstance();
        
        //LogUtil.put(LogFactory.getInstance(Integer.toString(scale), this, commonStrings.CONSTRUCTOR));
        
        this.CELLS_PER_ROW = 16; //13;
        this.fontSize = (20 + 6) * this.scale; //currentFont.getSize() + 6;
        this.baseCharWidth = fontSize + (6 * this.scale);
        this.cellSize = fontSize + (6 * this.scale);// * 3 >> 1;
        this.textureSize = this.getAsTextureSize(CELLS_PER_ROW * cellSize);
        this.actualCellsPerRow = textureSize / cellSize;
        
//        LogUtil.put(LogFactory.getInstance(new StringMaker()
//            .append(" fontSize: ").append(fontSize)
//            .append(" baseCharWidth: ").append(this.baseCharWidth)
//            .append(" cellSize: ").append(cellSize)
//            .append(" textureSize: ").append(textureSize)
//            .append(" actualCellsPerRow: ").append(actualCellsPerRow)
//            //.append(" extraCellsPerRow: ").append(extraCellsPerRow)
//            .toString(), this, commonStrings.CONSTRUCTOR));

//        final StringMaker stringMaker = new StringMaker();
//        for(short index = 0; index < this.pattern.length(); index++) {
//            //stringMaker.append('0').append('x').append(Integer.toHexString(this.pattern.charAt(index))).append(',');
//            charArray[this.pattern.charAt(index)] = index;
//        }
//        
//        for(short index = 0; index < this.charArray.length; index++) {
//            stringMaker.append('0').append('x').append(Integer.toHexString(charArray[index])).append(',');
//        }
//        
//        LogUtil.put(LogFactory.getInstance(stringMaker.toString(), this, commonStrings.CONSTRUCTOR));
    }
    
    public int getAsTextureSize(int textureSize)
    {
        if(textureSize <= 64)
        {
            textureSize = 64;
        }
        else
            if(textureSize <= 128)
            {
                textureSize = 128;
            }
            else
                if(textureSize <= 256)
                {
                    textureSize = 256;
                }
                else
                    if(textureSize <= 512)
                    {
                        textureSize = 512;
                    }
                    else
                        if(textureSize <= 1024)
                        {
                            textureSize = 1024;
                        }

        return textureSize;
    }

    public int getCellSize(int cellSize)
    {
        if(cellSize <= 16)
        {
            cellSize = 16;
        }
        else
            if(cellSize <= 32)
            {
                cellSize = 32;
            }
            else
                if(cellSize <= 64)
                {
                    cellSize = 64;
                }
                else
                    if(cellSize <= 128)
                    {
                        cellSize = 128;
                    }
                else
                    if(cellSize <= 256)
                    {
                        cellSize = 256;
                    }

        return cellSize;
    }

    public int getYOffset() {
        return ((this.scale - 1) * (this.cellSize));
    }
    
}
